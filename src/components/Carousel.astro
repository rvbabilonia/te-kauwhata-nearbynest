---
import FacebookFrame from './FacebookFrame.astro';
import Tile from './Tile.astro';

interface Props {
    items: (FacebookItem | TileItem)[];
}

interface FacebookItem {
    type: 'facebook';
    pageId: string;
}

interface TileItem {
    type: 'tile';
    title: string;
    description: string;
    imageUrl?: string;
    link?: string;
}

const { items } = Astro.props;
---

<div class="carousel-container relative w-full overflow-hidden">
    <div class="carousel-track flex transition-transform duration-300 ease-in-out">
        {
            items.map((item) => (
                <div class="carousel-item flex-none w-full md:w-1/2 xl:w-1/3 px-2">
                    <div class="border border-gray-300 rounded-lg shadow-md overflow-hidden h-full">
                        {item.type === 'facebook' ? (
                            <FacebookFrame pageId={item.pageId} />
                        ) : (
                            <Tile title={item.title} description={item.description} imageUrl={item.imageUrl} link={item.link} />
                        )}
                    </div>
                </div>
            ))
        }
    </div>
    <button class="carousel-prev absolute left-0 top-0 bottom-0 h-full bg-black bg-opacity-50 px-2 shadow-md z-10 flex items-center justify-center">
        <span class="sr-only">Previous</span>
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
        </svg>
    </button>
    <button class="carousel-next absolute right-0 top-0 bottom-0 h-full bg-black bg-opacity-50 px-2 shadow-md z-10 flex items-center justify-center">
        <span class="sr-only">Next</span>
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
        </svg>
    </button>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const track = document.querySelector('.carousel-track');
        const items = document.querySelectorAll('.carousel-item');
        const prevButton = document.querySelector('.carousel-prev');
        const nextButton = document.querySelector('.carousel-next');
        const container = document.querySelector('.carousel-container');

        if (!track || !items.length || !prevButton || !nextButton || !container) return;

        let currentIndex = 0;
        const getItemsPerView = () => {
            if (window.innerWidth >= 1280) return 3; // xl breakpoint for desktop
            if (window.innerWidth >= 768) return 2; // md breakpoint for tablet
            return 1; // mobile
        };

        const itemsPerView = getItemsPerView();
        const maxIndex = Math.max(0, items.length - itemsPerView);

        // Create indicators container
        const indicatorsContainer = document.createElement('div');
        indicatorsContainer.className = 'carousel-indicators flex justify-center gap-2 mt-4';
        container.appendChild(indicatorsContainer);

        // Create indicator dots
        const totalDots = maxIndex + 1;
        for (let i = 0; i < totalDots; i++) {
            const dot = document.createElement('button');
            dot.className = 'carousel-indicator w-3 h-3 rounded-full bg-gray-300 transition-colors';
            dot.setAttribute('aria-label', `Go to slide ${i + 1}`);

            dot.addEventListener('click', () => {
                currentIndex = i;
                updateCarousel();
            });

            indicatorsContainer.appendChild(dot);
        }

        const indicators = document.querySelectorAll('.carousel-indicator');

        const updateCarousel = () => {
            const itemWidth = items[0].offsetWidth;
            track.style.transform = `translateX(-${currentIndex * itemWidth}px)`;

            // Update indicators
            indicators.forEach((indicator, index) => {
                if (index === currentIndex) {
                    indicator.classList.add('bg-blue-600');
                    indicator.classList.remove('bg-gray-300');
                } else {
                    indicator.classList.add('bg-gray-300');
                    indicator.classList.remove('bg-blue-600');
                }
            });
        };

        prevButton.addEventListener('click', () => {
            if (currentIndex > 0) {
                currentIndex--;
            } else {
                // Loop back to the end when at the beginning
                currentIndex = maxIndex;
            }
            updateCarousel();
        });

        nextButton.addEventListener('click', () => {
            if (currentIndex < maxIndex) {
                currentIndex++;
            } else {
                // Loop back to the beginning when at the end
                currentIndex = 0;
            }
            updateCarousel();
        });

        // Initialize
        updateCarousel();

        // Handle resize
        window.addEventListener('resize', () => {
            const newItemsPerView = getItemsPerView();
            const newMaxIndex = Math.max(0, items.length - newItemsPerView);

            // Update indicators if needed
            if (newMaxIndex !== maxIndex) {
                // Clear existing indicators
                indicatorsContainer.innerHTML = '';

                // Create new indicators
                for (let i = 0; i <= newMaxIndex; i++) {
                    const dot = document.createElement('button');
                    dot.className = 'carousel-indicator w-3 h-3 rounded-full bg-gray-300 transition-colors';
                    dot.setAttribute('aria-label', `Go to slide ${i + 1}`);

                    dot.addEventListener('click', () => {
                        currentIndex = i;
                        updateCarousel();
                    });

                    indicatorsContainer.appendChild(dot);
                }
            }

            if (currentIndex > newMaxIndex) {
                currentIndex = newMaxIndex;
            }

            updateCarousel();
        });
    });

    // Re-initialize carousel when navigating between pages (for Astro view transitions)
    document.addEventListener('astro:page-load', () => {
        const script = document.currentScript;
        const event = new Event('DOMContentLoaded');
        document.dispatchEvent(event);
        script?.remove();
    });
</script>
